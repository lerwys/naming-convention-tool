/*
 * This software is Copyright by the Board of Trustees of Michigan
 * State University (c) Copyright 2012.
 *
 * You may use this software under the terms of the GNU public license
 *  (GPL). The terms of this license are described at:
 *       http://www.gnu.org/licenses/gpl.txt
 *
 * Contact Information:
 *   Facilitty for Rare Isotope Beam
 *   Michigan State University
 *   East Lansing, MI 48824-1321
 *   http://frib.msu.edu
 *
 */
package org.openepics.names.model;

import com.google.common.base.Preconditions;

import javax.annotation.Nullable;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ManyToOne;

import java.util.Date;

/**
 * A revision of a NamePart entity representing its state at some point in time.
 *
 * @author Vasu V <vuppala@frib.msu.org>
 * @author Marko Kolar <marko.kolar@cosylab.com>
 */
@Entity
public class NamePartRevision extends Persistable {

    private @ManyToOne NamePart namePart;

    private Date requestDate;

    private @ManyToOne @Nullable UserAccount requestedBy;

    private @Nullable String requesterComment;

    private boolean deleted;

    private @ManyToOne @Nullable NamePart parent;

    private String name;

    private String mnemonic;
    
    private String mnemonicEqClass;

    @Enumerated(EnumType.STRING)
    private NamePartRevisionStatus status;

    private @ManyToOne @Nullable UserAccount processedBy = null;

    private @Nullable Date processDate = null;

    private @Nullable String processorComment = null;
    
    protected NamePartRevision() {}

    /**
     * @param namePart the name part the revision pertains to
     * @param requestDate the time when the revision was proposed
     * @param requestedBy the user that proposed the revision. Null if the revision was generated by an automated
     * process.
     * @param requesterComment the comment the user gave when proposing the revision. Null if no comment was given.
     * @param deleted a flag signifying that the revision represents deletion of the name part
     * @param parent the parent of this name part in the hierarchy. Null if at the top of the hierarchy.
     * @param name the long, descriptive name of the part. Does not need to follow a convention.
     * @param mnemonic the short, mnemonic name of the part in accordance with the naming convention
     * @param mnemonicEqClass the representative of the equivalence class the mnemonic belongs to. This is
     * used to ensure uniqueness of mnemonics on certain levels when treating similar looking names (for example, containing 0 vs.
     * O, 1 vs. l) as equal.
     */
    public NamePartRevision(NamePart namePart, Date requestDate, @Nullable UserAccount requestedBy, @Nullable String requesterComment, boolean deleted, @Nullable NamePart parent, String name, String mnemonic, String mnemonicEqClass) {
        Preconditions.checkNotNull(namePart);
        Preconditions.checkNotNull(requestDate);
        Preconditions.checkArgument(requesterComment == null || !requesterComment.isEmpty());
        Preconditions.checkArgument(name != null && !name.isEmpty());
        Preconditions.checkArgument(mnemonic != null && !mnemonic.isEmpty());
        Preconditions.checkArgument(mnemonicEqClass != null);
        this.namePart = namePart;
        this.requestDate = requestDate;
        this.requestedBy = requestedBy;
        this.requesterComment = requesterComment;
        this.deleted = deleted;
        this.parent = parent;
        this.name = name;
        this.mnemonic = mnemonic;
        this.mnemonicEqClass = mnemonicEqClass;
        this.status = NamePartRevisionStatus.PENDING;
    }

    /**
     * The name part the revision pertains to.
     */
    public NamePart getNamePart() { return namePart; }

    /**
     * The time when the revision was proposed.
     */
    public Date getRequestDate() { return requestDate; }

    /**
     * The user that proposed the revision. Null if the revision was generated by an automated process.
     */
    public @Nullable UserAccount getRequestedBy() { return requestedBy; }

    /**
     * The comment the user gave when proposing the revision. Null if no comment was given.
     */
    public @Nullable String getRequesterComment() { return requesterComment; }

    /**
     * A flag signifying that the revision represents deletion of the name part.
     */
    public boolean isDeleted() { return deleted; }

    /**
     * The parent of this name part in the hierarchy. Null if at the top of the hierarchy.
     */
    public @Nullable NamePart getParent() { return parent; }

    /**
     * The long, descriptive name of the part. Does not need to follow a convention.
     */
    public String getName() { return name; }

    /**
     * The short, mnemonic name of the part in accordance with the naming convention.
     */
    public String getMnemonic() { return mnemonic; }
    
    /**
     * The representative of the equivalence class the mnemonic belongs to. This is used to ensure uniqueness of
     * mnemonics on certain level when treating similar looking names (for example, containing 0 vs. O, 1 vs. l) as equal.
     */
    public String getMnemonicEqClass() { return mnemonicEqClass; }
    
    //TODO Remove after first deploy!!!
    public void setMnemonicEqClass(String mnemonicEqClass) { this.mnemonicEqClass = mnemonicEqClass; }

    /**
     * The status of the name part in the request / approve workflow.
     */
    public NamePartRevisionStatus getStatus() { return status; }

    /**
     * The time the revision was processed in the request / approve workflow. Null if still pending.
     */
    public @Nullable Date getProcessDate() { return processDate; }

    /**
     * The user who processed the revision in the request / approve workflow. Null if still pending or if the revision
     * was processed by an automated process.
     */
    public @Nullable UserAccount getProcessedBy() { return processedBy; }

    /**
     * The comment the user gave when processing the revision in the request / approve workflow. Null if still pending
     * or if no comment was given.
     */
    public @Nullable String getProcessorComment() { return processorComment; }
    
    /**
     * Updates the revision's status in the request / approve workflow as either approved, rejected or canceled. This
     * completes the workflow and no further status changes are possible after that.
     *
     * @param status the new status of the name part
     * @param date the time the revision was processed
     * @param by the user who processed the revision. Null if the revision was processed by an automated process.
     * @param comment the comment the administrator user gave when processing the revision. Null if no comment was given.
     */
    public void updateAsProcessed(NamePartRevisionStatus status, Date date, @Nullable UserAccount by, @Nullable String comment) {
        Preconditions.checkState(this.status == NamePartRevisionStatus.PENDING);
        Preconditions.checkArgument(status != NamePartRevisionStatus.PENDING);
        Preconditions.checkNotNull(date);
        Preconditions.checkArgument(comment == null || !comment.isEmpty());
        this.status = status;
        this.processDate = date;
        this.processedBy = by;
        this.processorComment = comment;
    }
}
