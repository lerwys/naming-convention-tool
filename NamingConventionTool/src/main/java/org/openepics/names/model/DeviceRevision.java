/*-
* Copyright (c) 2014 European Spallation Source
* Copyright (c) 2014 Cosylab d.d.
*
* This file is part of Naming Service.
* Naming Service is free software: you can redistribute it and/or modify it under
* the terms of the GNU General Public License as published by the Free
* Software Foundation, either version 2 of the License, or any newer version.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
* more details.
*
* You should have received a copy of the GNU General Public License along with
* this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
*/
package org.openepics.names.model;

import com.google.common.base.Preconditions;

import javax.annotation.Nullable;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import java.util.Date;

/**
 * A revision of a Device entity representing its state at some point in time.
 *
 * @author Marko Kolar 
 */
@Entity
public class DeviceRevision extends Persistable {

	private static final long serialVersionUID = -7697708696131775826L;

	private @ManyToOne Device device;

    private @ManyToOne UserAccount requestedBy;

    private Date requestDate;

    private boolean deleted;

    private @ManyToOne NamePart section;

    private @ManyToOne NamePart deviceType;

    private @Nullable String instanceIndex;

    private String conventionName;

    private String conventionNameEqClass;
    
    private @Nullable String additionalInfo;

    protected DeviceRevision() {}

    /**
     * @param device the device the revision pertains to
     * @param requestDate the time when the revision was proposed
     * @param requestedBy the user that proposed the revision. Null if the revision was generated by an automated
     * process.
     * @param deleted a flag signifying that the revision represents deletion of the device
     * @param section the section containing the device
     * @param deviceType the type of the device
     * @param instanceIndex an additional identifier that, in combination with other attributes, determine the unique
     * convention name of the device. Null if omitted.
     * @param conventionName the full name of the device in accordance with the naming convention
     * @param conventionNameEqClass the representative of the equivalence class the convention name belongs to. This is
     * used to ensure uniqueness of convention names when treating similar looking names (for example, containing 0 vs.
     * O, 1 vs. l) as equal.
     * @param additionalInfo Additional information (description, comment etc) about the device. 
     */
    public DeviceRevision(Device device, Date requestDate, @Nullable UserAccount requestedBy, boolean deleted, NamePart section, NamePart deviceType, @Nullable String instanceIndex, String conventionName, String conventionNameEqClass, @Nullable String additionalInfo) {
        Preconditions.checkNotNull(device);
        Preconditions.checkNotNull(requestDate);
        Preconditions.checkNotNull(section);
        Preconditions.checkNotNull(deviceType);
        Preconditions.checkArgument(instanceIndex == null || !instanceIndex.isEmpty());
        Preconditions.checkArgument(conventionName != null && !conventionName.isEmpty());
        Preconditions.checkArgument(conventionNameEqClass != null);
        Preconditions.checkArgument(additionalInfo == null || !additionalInfo.isEmpty());
        this.device = device;
        this.requestedBy = requestedBy;
        this.requestDate = requestDate;
        this.deleted = deleted;
        this.section = section;
        this.deviceType = deviceType;
        this.instanceIndex = instanceIndex;
        this.conventionName = conventionName;
        this.conventionNameEqClass = conventionNameEqClass;
        this.additionalInfo=additionalInfo;
    }

    /**
     * @return The device the revision pertains to.
     */
    public Device getDevice() { return device; }
    
    /**
     * @return The time when the revision was proposed.
     */
    public Date getRequestDate() { return requestDate; }

    /**
     * @return The user that proposed the revision. Null if the revision was generated by an automated process.
     */
    public @Nullable UserAccount getRequestedBy() { return requestedBy; }

    /**
     * @return A flag signifying that the revision represents deletion of the device.
     */
    public boolean isDeleted() { return deleted; }

    /**
     * @return The section containing the device.
     */
    public NamePart getSection() { return section; }

    /**
     * @return The type of the device.
     */
    public NamePart getDeviceType() { return deviceType; }

    /**
     * @return An additional identifier that, in combination with other attributes, determine the unique convention name of the device. Null if omitted.
     */
    public @Nullable String getInstanceIndex() { return instanceIndex; }

    /**
     * @return The full name of the device in accordance with the naming convention.
     */
    public String getConventionName() { return conventionName; }

    /**
     * @return The representative of the equivalence class the convention name belongs to. This is used to ensure uniqueness of
     * convention names when treating similar looking names (for example, containing 0 vs. O, 1 vs. l) as equal.
     */
    public String getConventionNameEqClass() { return conventionNameEqClass; }
    
    /** 
     * @return Additional information (description, comment etc) about the device. 
     */
    public @Nullable String getAdditionalInfo(){ return additionalInfo;}
}
